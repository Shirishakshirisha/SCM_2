npx tailwindcss -i ./src/main/resources/static/css/input.css -o ./src/main/resources/static/css/output.css --watch





for taiwind inside any html file add this in head
  <link href="/css/output.css" rel="stylesheet"> 


// flowbit , so add this in head 
  <link href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css" rel="stylesheet" />



//

To get flowbite  js add this in body at last 
<script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>



// 1:52 min 
//adding thymeleaf fragments
//we are using this because some content remains same for all the html pages 
// instead of doing the same thing for every page 
//Go to thymeleaf documenttaion 
//thymeleaf page layouts
//we have one common header file which has a content which is same 
//create a fragment in it and insert in to the other pages 
and also we can replace some host tag(which can come under hot place)

//in place of insert u can use replace and vice versa 
//<div class="parent-fragment" th:fragment="parent">


// u can imagine the fragment as a function here parent
//now u can pass parameters in to itparent(x,y)
<div class="parent-fragment" th:fragment="parent(x,y)">
<h1>Value of x is <span th:text="${x}"></span></h1>
th:replace="~{base :: parent('one','two')}


passing the element like div , p ....
in about.html
<div class="host-tag" th:replace="~{base :: parent(~{::div})}"></div>
    <div>This is the dynamic content from the about page handler</div>

    int base.html
    <div class="parent-fragment" th:fragment="parent(content)">
    <div th:text="${content}"></div>


//passing through id
 <div th:replace="~{base :: parent(~{::#second_content})}">
        <section id="main_content">
            <h2>This is the dynamic main content passing from services</h2>
        </section>


// passing through class
    <div th:replace="~{base :: parent(~{::.third_content})}">
<section class="third_content">
            <h2>This is the dynamic third content passing from services</h2>
        </section>
